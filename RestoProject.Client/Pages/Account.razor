@page "/account"
@inject ILocalStorageService LocalStorage
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>Account</PageTitle>

@if (!string.IsNullOrEmpty(GetUserName()))
{
	<h3 class="my-4">Your Account</h3>

	<p>@GetUserName()</p>

	<button type="button" class="btn btn-danger" @onclick="Logout">Logout</button>
}
else
{
	<h3 class="my-4">Please Login</h3>

	<button type="button" class="btn btn-success" @onclick="OpenLogin">Login</button>
}

<div class="modal-backdrop fade @(show ? "show" : "") @(display ? "d-block" : "d-none")"></div>

<div class="modal fade @(show ? "show" : "")  @(display ? "d-block" : "d-none")" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Login Form</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="loginEmail" class="form-label">Email</label>
          <input type="email" class="form-control" id="loginEmail" placeholder="name@example.com" autocomplete="off" required @bind-value="user" />
        </div>
        <div class="mb-3">
          <label for="loginPassword" class="form-label">Password</label>
          <input type="password" class="form-control" id="loginPassword" required @bind-value="password" />
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-success" @onclick="Login">Login</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
      </div>
    </div>
  </div>
</div>

@code {
  //[CascadingParameter]
  //public Layout.MainLayout mainLayout { get; set; }

  public bool show, display, loggedIn;
  public string? user, password;

  public string? GetUserName()
  {
    return loggedIn ? user : null;
  }

  public async Task OpenLogin()
  {
    display = true;
    await Task.Delay(100);
    show = true;
  }

  public async Task Logout()
  {
    user = null;
    loggedIn = false;
    //await LocalStorage.RemoveAsync("user");
    await LocalStorage.RemoveItemAsync("user");
  }

  private async Task Close()
  {
    show = false;
    await Task.Delay(500);
    display = false;
  }

  private async Task Login()
  {
    if (!string.IsNullOrEmpty(user) && !string.IsNullOrWhiteSpace(password))
    {
      // NOTE: Check password here!!
      await Close();
      loggedIn = true;
      password = null;
      //await LocalStorage.SaveStringAsync("user", user);
      await LocalStorage.SetItemAsStringAsync("user", user);
    }
  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    //user = await LocalStorage.GetStringAsync("user");
    user = await LocalStorage.GetItemAsStringAsync("user");
    loggedIn = !string.IsNullOrEmpty(user);
  }
}
