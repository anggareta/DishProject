@page "/cart"
@inject ICartService CartService
@inject IUserService UserService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavMan
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@if (!orderPlaced)
{
  <h3>Menu Cart</h3>
  @if (cartItems == null || cartItems.Count <= 0)
  {
    <span>You have no items in your cart.</span>
  }
  else
  {
    <div>
      @foreach (var item in cartItems)
      {
        <div class="item-container">
          <div class="item-image-wrapper"><img src="@item.Image" class="item-image" /></div>
          <div class="item-name">
            <h5><a href="/dish/@item.DishId">@item.DishName</a></h5>
            <span>@item.FlavorName</span><br />
            <button class="btn-delete" @onclick="@(() => DeleteItem(item))">Delete</button>
            <EditForm Model="item">
              <InputNumber id="quantity" @bind-Value="item.Quantity"
                           class="form-control" style="width: 70px" />
            </EditForm>
          </div>
          <div class="item-price">Rp @(item.Price * item.Quantity)</div>
        </div>
      }
      <div class="item-price">
        Total (@cartItems.Count): Rp @cartItems.Sum(item => item.Price * item.Quantity)
      </div>
      @if (loggedIn)
      {
        <div style="text-align: center; margin-top: 10px;">
          <button class="btn btn-primary btn-lg" @onclick="PlaceOrder">Place Order</button>
        </div>
      }
      else
      {
        <div style="text-align: center; margin-top: 10px;">
          <h5>Please login first...</h5>
        </div>
      }
    </div>
  }
}
else
{
  <h3>Thank you for your order!</h3>
  <h4>Here's what you'll get:</h4>
  <div>
    @foreach (var item in cartItems)
    {
      <div class="item-container">
        <div class="item-image-wrapper"><img src="@item.Image" class="item-image" /></div>
        <div class="item-name">
          <h5><a href="/dish/@item.DishId">@item.DishName</a></h5>
          <span>@item.FlavorName</span><br />
        </div>
        <div class="item-price">Rp @(item.Price * item.Quantity)</div>
      </div>
    }
    <div class="item-price">
      Total (@cartItems.Count): Rp @cartItems.Sum(item => item.Price * item.Quantity)
    </div>
  </div>
}

<div class="modal-backdrop fade @(show ? "show" : "") @(display ? "d-block" : "d-none")"></div>

<div class="modal fade @(show ? "show" : "")  @(display ? "d-block" : "d-none")" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Submit Order</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">

        <div class="mb-3">
          <label for="name" class="form-label">Name</label>
          <InputText id="name" @bind-Value="dishOrder.Name" class="form-control" />
        </div>
        <div class="mb-3">
          <label for="description" class="form-label">Message</label>
          <InputTextArea id="description" @bind-Value="dishOrder.Description" class="form-control" />
        </div>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-success" @onclick="Order">Submit</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Cancel</button>
      </div>
    </div>
  </div>
</div>

@code {
  public bool show, display, loggedIn;
  public string? user;
  public DishOrder dishOrder { get; set; } = new DishOrder { OrderId = "" };

  List<CartItem> cartItems = new List<CartItem>();
  bool orderPlaced = false;

  protected override void OnInitialized()
  {
    UserService.OnChange += StateHasChanged;
  }

  public void Dispose()
  {
    UserService.OnChange -= StateHasChanged;
  }

  protected override async Task OnInitializedAsync()
  {
    cartItems = await CartService.GetCartItems();
    user = await LocalStorage.GetItemAsStringAsync("user");
    loggedIn = !string.IsNullOrEmpty(user);
  }

  private async Task DeleteItem(CartItem item)
  {
    await CartService.DeleteItem(item);
    cartItems = await CartService.GetCartItems();
  }

  private async Task PlaceOrder()
  {
    display = true;
    await Task.Delay(100);
    show = true;
  }

  // private async Task PlaceOrder()
  // {
  //   orderPlaced = true;
  //   await CartService.EmptyCart();
  // }

  private async Task Order()
  {
    show = false;
    await CartService.SubmitCart(dishOrder);
    display = false;
    orderPlaced = true;
  }
  private async Task Close()
  {
    show = false;
    await Task.Delay(500);
    display = false;
  }
}
