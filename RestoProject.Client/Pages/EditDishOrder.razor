@page "/order"
@page "/order/{orderId}"
@inject HttpClient Http
@inject NavigationManager NavMan
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@if (orderId == null)
{
  <h3>Add Order</h3>
}
else
{
  <h3>Edit @dishOrder.Name</h3>
}

<EditForm Model="dishOrder" OnSubmit="HandleSubmit">
  <div class="mb-3">
    <label for="name" class="form-label">Name</label>
    <InputText id="name" @bind-Value="dishOrder.Name" class="form-control" />
  </div>
  <div class="mb-3">
    <label for="description" class="form-label">Message</label>
    <InputTextArea id="description" @bind-Value="dishOrder.Description" class="form-control" />
  </div>
  <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
  [Parameter]
  public string orderId { get; set; }
  public DishOrder dishOrder { get; set; } = new DishOrder { OrderId = "ABC" + DateTime.Now.ToString("ddMMyyyy") + "-000", Name = "", Description = "", OrderTime = DateTime.Now };

  protected override async Task OnParametersSetAsync()
  {
    if (orderId != null && orderId != "")
    {
      var result = await Http.GetFromJsonAsync<DishOrder>($"api/dishorders/{orderId}");
      if (result is not null)
        dishOrder = result;
    }
  }

  async Task HandleSubmit()
  {
    if (orderId is not null)
    {
      var result = await Http.PutAsJsonAsync($"api/dishorders/{orderId}", dishOrder);
      dishOrder = await result.Content.ReadFromJsonAsync<DishOrder>();
      NavMan.NavigateTo("/dishorders");
    }
    else
    {
      var result = await Http.PostAsJsonAsync($"api/dishorders", dishOrder);
      dishOrder = await result.Content.ReadFromJsonAsync<DishOrder>();
      NavMan.NavigateTo("/dishorders");
    }
  }

}
